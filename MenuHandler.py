from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from loguru import logger

from OrderManager import order_manager
from PaymentHandler import PaymentStates
from config import CARD_DETAILS, USDT_WALLET_ADDRESS, bot, WELCOME_IMAGE_URL
from instruction_manager import InstructionManager  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏


class MenuHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""

    @staticmethod
    async def send_welcome(message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –º–µ–Ω—é."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üéÅ –ö—É–ø–∏—Ç—å Gift-–∫–æ–¥", callback_data="select_category")],
                    [InlineKeyboardButton(text="üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
                ]
            )
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=WELCOME_IMAGE_URL,
                caption=(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ Gift-–∫–æ–¥–æ–≤!\n\n"
                    "üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ–¥—ã –¥–ª—è:\n"
                    "‚Ä¢ üõí Binance\n"
                    "‚Ä¢ üéÆ Steam\n"
                    "‚Ä¢ üì∫ Netflix\n"
                    "‚Ä¢ üéÆ Xbox\n"
                    "‚Ä¢ üéµ Spotify\n"
                    "‚Ä¢ üéÆ PlayStation Store\n"
                    "‚Ä¢ üçé ITunes\n"
                    "‚Ä¢ üì¶ Amazon\n"
                    "‚Ä¢ üéÆ EA Gift Card\n\n"
                    "üí° –ù–∞–¥—ë–∂–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ!\n\n"
                    "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
                ),
                reply_markup=keyboard
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def select_category(callback_query: CallbackQuery):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="EA Gift Card", callback_data="category_ea")],
                    [InlineKeyboardButton(text="Steam", callback_data="category_steam")],
                    [InlineKeyboardButton(text="Binance", callback_data="category_binance")],
                    [InlineKeyboardButton(text="Netflix", callback_data="category_netflix")],
                    [InlineKeyboardButton(text="Xbox", callback_data="category_xbox")],
                    [InlineKeyboardButton(text="Spotify", callback_data="category_spotify")],
                    [InlineKeyboardButton(text="PlayStation Store", callback_data="category_playstation")],
                    [InlineKeyboardButton(text="ITunes", callback_data="category_itunes")],
                    [InlineKeyboardButton(text="Amazon", callback_data="category_amazon")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="main_menu")],
                ]
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if callback_query.message.text:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text="üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=keyboard
                )
            else:
                await bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text="üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ select_category: {e}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def show_instruction_menu(callback_query: CallbackQuery, category: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", callback_data=f"show_instruction_{category}")],
                    [InlineKeyboardButton(text="‚úÖ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π", callback_data=f"confirm_{category}_0")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="select_category")],
                ]
            )
            await callback_query.message.edit_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º.",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è {category}: {e}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def select_amount_menu(callback_query: CallbackQuery, category: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
            amounts = [5, 15, 25, 50, 100, 150, 200, 350, 500, 1000]

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"{amount} USD", callback_data=f"amount_{category}_{amount}")]
                    for amount in amounts
                ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="select_category")]]
            )

            await callback_query.message.edit_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.capitalize()}.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def confirm_amount(callback_query: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—É–º–º—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã."""
        try:
            data = callback_query.data.split("_")
            if len(data) != 3:
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö callback_query.")

            _, category, amount = data
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª {amount} USD –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order_manager.create_order(callback_query.from_user.id, category, int(amount))

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ –°–ë–ü", callback_data="pay_sbp")],
                    [InlineKeyboardButton(text="üì∑ –°–ë–ü QR", callback_data="pay_sbp_qr")],
                    [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card")],
                    [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—Ç–∞ USDT (TRC20)", callback_data="pay_usdt")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"select_category")],
                ]
            )

            await callback_query.message.edit_text(
                f"üíµ –°—É–º–º–∞: {amount} USD\nüëá –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º—ã: {e}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def handle_payment_choice(callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
        try:
            if callback_query.data == "pay_usdt":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É USDT.")
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data="paid_usdt")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="select_category")],
                    ]
                )
                await callback_query.message.edit_text(
                    text=(
                        "üíµ **–î–ª—è –æ–ø–ª–∞—Ç—ã USDT (TRC20):**\n\n"
                        f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: `{USDT_WALLET_ADDRESS}`\n\n"
                        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Å–µ—Ç–∏ **TRC20**."
                    ),
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
            elif callback_query.data == "pay_card":
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.")
                await callback_query.message.edit_text(
                    text=(
                        "üí≥ **–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É:**\n\n"
                        f"{CARD_DETAILS}\n\n"
                        "üìå –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
                    )
                )
            else:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {callback_query.data}")
                await callback_query.message.reply("‚ùå –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def handle_receipt(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            current_state = await state.get_state()
            if current_state != PaymentStates.waiting_for_card_receipt.state:
                await message.reply("‚ùå –ú—ã –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é —Å–µ–π—á–∞—Å.")
                return

            if message.photo or message.document:
                logger.info(f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏–Ω—è—Ç–∞.")
                await message.reply("‚úÖ –í–∞—à–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                await state.clear()
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.")
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")