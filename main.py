import asyncio
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, Message
from loguru import logger
from aiogram import F, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from config import bot, CARD_DETAILS, USDT_WALLET_ADDRESS
from PaymentHandler import PaymentHandler, PaymentStates
from MenuHandler import MenuHandler
from instruction_manager import InstructionManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ FSM
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    # Callback'–∏
    dp.callback_query.register(MenuHandler.confirm_amount, lambda c: c.data.startswith("amount_"))
    dp.callback_query.register(MenuHandler.select_category, lambda c: c.data.startswith("category_"))
    dp.callback_query.register(handle_support, lambda c: c.data == "support")
    dp.callback_query.register(handle_category_selection, lambda c: c.data.startswith("category_"))
    dp.callback_query.register(confirm_instruction_handler, lambda c: c.data.startswith("confirm_"))
    dp.callback_query.register(handle_select_category, lambda c: c.data == "select_category")
    dp.callback_query.register(paid_usdt_handler, lambda c: c.data == "paid_usdt")
    dp.callback_query.register(paid_card_handler, lambda c: c.data == "paid_card")

    # –°–æ–æ–±—â–µ–Ω–∏—è
    dp.message.register(start_handler, Command("start"))
    dp.message.register(transaction_hash_handler, F.content_type == "text")
    dp.message.register(receipt_handler, F.content_type.in_({"photo", "document"}))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    try:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await MenuHandler.send_welcome(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
async def handle_support(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'."""
    try:
        await callback_query.message.edit_text(
            "üìß –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
            "‚úâÔ∏è Email: support@example.com\n"
            "üìû –¢–µ–ª–µ–≥—Ä–∞–º: @support_bot",
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞': {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(lambda c: c.data.startswith("category_"))
async def handle_category_selection(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        category_name = callback_query.data.split("_")[1]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await MenuHandler.show_instruction_menu(callback_query, category_name)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(lambda c: c.data.startswith("show_instruction_"))
async def show_instruction_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'."""
    try:
        category_name = callback_query.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
        await InstructionManager.send_instruction(callback_query, category_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_instruction_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–∑–Ω–∞–∫–æ–º–ª–µ–Ω —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π'."""
    category_name = callback_query.data.split("_")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}")
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã
        await MenuHandler.select_amount_menu(callback_query, category_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(lambda c: c.data == "pay_sbp")
async def handle_pay_sbp(callback_query: CallbackQuery):
    await callback_query.message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")

@dp.callback_query(lambda c: c.data == "pay_sbp_qr")
async def handle_pay_sbp_qr(callback_query: CallbackQuery):
    await callback_query.message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")

@dp.callback_query(lambda c: c.data == "pay_card")
async def handle_pay_card(callback_query: CallbackQuery):
    await callback_query.message.reply(
        "üí≥ **–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É:**\n\n"
        f"{CARD_DETAILS}\n\n"
        "üìå –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞."
    )

@dp.callback_query(lambda c: c.data == "pay_usdt")
async def handle_pay_usdt(callback_query: CallbackQuery):
    await callback_query.message.reply(
        "üíµ **–î–ª—è –æ–ø–ª–∞—Ç—ã USDT (TRC20):**\n\n"
        f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: `{USDT_WALLET_ADDRESS}`\n\n"
        "üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Å–µ—Ç–∏ **TRC20**. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!"
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å Gift-–∫–æ–¥"
async def handle_select_category(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å Gift-–∫–æ–¥'."""
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª '–ö—É–ø–∏—Ç—å Gift-–∫–æ–¥'.")
        await MenuHandler.select_category(callback_query)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–ö—É–ø–∏—Ç—å Gift-–∫–æ–¥': {e}")
        await callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –¥–ª—è USDT
@dp.callback_query(lambda c: c.data == "paid_usdt")
async def paid_usdt_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è USDT."""
    try:
        await PaymentHandler.handle_paid_usdt(callback_query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã USDT: {e}")
        await callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ö–µ—à–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.message(StateFilter(PaymentStates.waiting_for_transaction_hash))  # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def transaction_hash_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    try:
        transaction_hash = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ö—ç—à –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {transaction_hash}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ö—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª–∏–Ω–∞ 64 —Å–∏–º–≤–æ–ª–∞)
        if len(transaction_hash) != 64 or not all(c in "0123456789abcdef" for c in transaction_hash):
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö—ç—à–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ 64-—Å–∏–º–≤–æ–ª—å–Ω—ã–π —Ö—ç—à.")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await message.reply("‚úÖ –í–∞—à —Ö—ç—à —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
async def paid_card_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É."""
    try:
        await PaymentHandler.handle_paid_card(callback_query, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É: {e}")
        await callback_query.message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç)
async def receipt_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await PaymentHandler.handle_receipt(message, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    register_handlers()  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
