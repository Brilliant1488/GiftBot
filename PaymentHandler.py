from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from loguru import logger


class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
    waiting_for_usdt_hash = State()
    waiting_for_card_receipt = State()
    waiting_for_transaction_hash = State()


class PaymentHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–ø–ª–∞—Ç—ã."""

    @staticmethod
    async def handle_pay_usdt(callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã USDT."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É USDT.")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ö—ç—à–∞
            await state.set_state(PaymentStates.waiting_for_transaction_hash)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            await callback_query.message.edit_text(
                text=(
                    "üíµ **–î–ª—è –æ–ø–ª–∞—Ç—ã USDT (TRC20):**\n\n"
                    f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: `T123abc456def789ghi`\n\n"
                    "üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ —Å–µ—Ç–∏ **TRC20**.\n\n"
                    "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å—é–¥–∞."
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã USDT: {e}")
            await callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def handle_paid_card(callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É."""
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É.")
        await callback_query.message.reply(
            text="üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª)."
        )
        await state.set_state(PaymentStates.waiting_for_card_receipt)

    @staticmethod
    async def handle_paid_usdt(callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è USDT."""
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è USDT.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
            current_state = await state.get_state()
            if current_state != PaymentStates.waiting_for_transaction_hash.state:
                await callback_query.message.reply("‚ùå –Ø –Ω–µ –æ–∂–∏–¥–∞—é —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")
                return

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏–ª' –¥–ª—è USDT: {e}")
            await callback_query.message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def handle_receipt(message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏."""
        current_state = await state.get_state()
        if current_state != PaymentStates.waiting_for_card_receipt:
            await message.reply(
                text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –Ø –Ω–µ –æ–∂–∏–¥–∞—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
            )
            return

        user_id = message.from_user.id
        if message.photo:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ.")
            await message.reply(
                text="‚úÖ –í–∞—à–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç."
            )
            await state.clear()
        elif message.document:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            await message.reply(
                text="‚úÖ –í–∞—à–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 10 –º–∏–Ω—É—Ç."
            )
            await state.clear()
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.")
            await message.reply(
                text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–∞–π–ª."
            )
